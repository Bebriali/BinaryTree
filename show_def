# 1 "differentiator.cpp"
# 1 "<command-line>"
# 1 "differentiator.cpp"



# 1 "include/color.h" 1
# 5 "differentiator.cpp" 2
# 1 "include/differentiator.h" 1



# 1 "include/tree_struct.h" 1



# 1 "include/error_keys.h" 1



enum ErrorKeys
{
    NO_ERRORS = 0,
    PTR_ERROR = 1,
};
# 5 "include/tree_struct.h" 2

const int MAX_VAR_NUM = 10;

enum NodeType
{
    NUM = 0,
    VAR = 1,
    OPN = 2
};

struct Variable
{
    char var;
    int var_code;
};

enum Operation
{
    ADD = 0,
    SUB = 1,
    MUL = 2,
    DIV = 3,
    SIN = 4,
    COS = 5,
    TAN = 6,
    CTG = 7,
    LOG = 8
};

struct Node_t
{
    enum NodeType type;
    int data;
    Node_t* left;
    Node_t* right;
};

struct Tree_t
{
    Node_t* root;
    size_t size;
    Variable var_list[MAX_VAR_NUM];
};

void TreeCtor(Tree_t* tree);
ErrorKeys TreeDtor(Tree_t* tree);

Node_t* CreateNode(Tree_t* tree, int value, NodeType type, Node_t* left, Node_t* right);
void NodeDtor(Node_t** node);

Node_t* Insert (Tree_t* tree, Node_t* node, int value, NodeType type);
void Print(Node_t* node);

const char* DefineOperation(int operation);
# 5 "include/differentiator.h" 2
# 15 "include/differentiator.h"
Node_t* Diff(Tree_t* tree, Node_t* node);
Node_t* Copy(Tree_t* tree, Node_t* node);
# 6 "differentiator.cpp" 2

Node_t* Diff(Tree_t* tree, Node_t* node)
{
    if (node->type == NUM) return CreateNode(tree, 0, NUM, NULL, NULL);
    if (node->type == VAR) return CreateNode(tree, 1, NUM, NULL, NULL);
    if (node->type == OPN)
    {
        switch(node->data)
        {
            case ADD:
                return CreateNode(tree, ADD, OPN, Diff(tree, node->left), Diff(tree, node->right));
            case SUB:
                return CreateNode(tree, SUB, OPN, Diff(tree, node->left), Diff(tree, node->right));
            case MUL:
                return CreateNode(tree, ADD, OPN, CreateNode(tree, MUL, OPN, Diff(tree, node->left), Copy(tree, node->right)), CreateNode(tree, MUL, OPN, Copy(tree, node->left), Diff(tree, node->right)))
                                                                                  ;
            case DIV:
                return CreateNode(tree, DIV, OPN, CreateNode(tree, SUB, OPN, CreateNode(tree, MUL, OPN, Diff(tree, node->left), Copy(tree, node->right)),
                                                                                CreateNode(tree, MUL, OPN, Copy(tree, node->left), Diff(tree, node->right))),
                                                    CreateNode(tree, MUL, OPN, Copy(tree, node->right), Copy(tree, node->right)));
            default:
                printf("\x1b[31m" "undefined differential of function or wrong type of operation : " "\x1b[0m");
                printf("%s\n", DefineOperation(node->data));
                return NULL;
        }
    }

    return NULL;
}

Node_t* Copy(Tree_t* tree, Node_t* node)
{
    assert(tree);

    if (node == NULL)
        return NULL;
    Node_t* new_node = CreateNode(tree, node->data, node->type, Copy(tree, node->left), Copy(tree, node->right));

    NodeDtor(&node);

    return new_node;
}
